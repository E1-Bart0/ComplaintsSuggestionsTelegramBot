from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Message, Update
from telegram.ext import CallbackContext

from db.core import session_scope
from db.services import (
    get_or_create_user_in_db,
    delete_user_from_db,
    get_all_users_from_db,
    update_to_superuser_of_password_correct,
)


def start(update: Update, context: CallbackContext) -> None:
    """Send a message when the command /start is issued."""
    user = update.effective_user
    with session_scope() as session:
        get_or_create_user_in_db(session, user)
    update.message.reply_text(
        """
        –ü—Ä–∏–≤–µ—Ç!
    –° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã —Å–º–æ–∂–µ—à—å –∞–Ω–æ–Ω–∏–º–Ω–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –∏–ª–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å.
        –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ, –∞ —è –ø–µ—Ä–µ–¥–∞–º —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º.
        –ß—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞–ø–∏—à–∏ –º–Ω–µ: /su <PASSWORD>
    """
    )


def alter_su_privileges(update: Update, context: CallbackContext):
    user = update.effective_user
    password = update.message.text[4:]
    with session_scope() as session:
        if update_to_superuser_of_password_correct(session, password, user):
            update.message.reply_text(
                "–¢–µ–ø–µ—Ä—å –í—ã –°—É–ø–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –º–æ–∂–µ—Ç–µ –≤–∏–¥–µ—Ç—å –≤—Å–µ –∂–∞–ª–æ–±—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å"
            )
        else:
            update.message.reply_text("–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å")


def delete_yourself(update: Update, context: CallbackContext):
    user = update.effective_user
    with session_scope() as session:
        if delete_user_from_db(session, user):
            update.message.reply_text("–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ —Å–µ–±—è")
        else:
            update.message.reply_text(
                "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –í–∞—Å –Ω–µ –±—ã–ª–æ –≤ –ë–î"
            )


def help_command(update: Update, context: CallbackContext) -> None:
    """Send a message when the command /help is issued."""
    update.message.reply_text("HELP")


def echo(update: Update, context: CallbackContext) -> None:
    """User decides how to send his message to group: as suggestion or as complaints"""
    keyboard = [
        [
            InlineKeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data="suggestion"),
            InlineKeyboardButton("–ñ–∞–ª–æ–±–∞", callback_data="complaint"),
        ],
        [
            InlineKeyboardButton(
                "–ê–Ω–æ–Ω–∏–º–Ω–æ–µ\n–°–æ–æ–±—â–µ–Ω–∏–µ", callback_data="anonymous message"
            ),
            InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="stop"),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    message_id = update.message.message_id
    update.message.reply_text(
        text="–ü–µ—Ä–µ–¥–∞—Ç—å –≤ –≥—Ä—É–ø–ø—É –∫–∞–∫:",
        reply_markup=reply_markup,
        reply_to_message_id=message_id,
    )


def parse_callback(update: Update, context: CallbackContext) -> None:
    """Parses the CallbackQuery and updates the message text."""
    query = update.callback_query
    query.answer()

    if query.data == "suggestion":
        header = "üòç –ù–û–í–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï üòç"
        reply_msg_to_group(update, query.message.reply_to_message, header)
    elif query.data == "complaint":
        header = "ü§¨ –ù–û–í–ê–Ø –ñ–ê–õ–û–ë–ê ü§¨"
        reply_msg_to_group(update, query.message.reply_to_message, header)
    elif query.data == "anonymous message":
        header = "üòé –ù–û–í–û–ï –ê–ù–û–ù–ò–ú–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï üòé"
        reply_msg_to_group(update, query.message.reply_to_message, header)
    query.delete_message()


def reply_msg_to_group(update: Update, message: Message, header):
    """Sending message to Group as a suggestion"""

    with session_scope() as session:
        for user in get_all_users_from_db(session):
            message.chat.id = user.id
            update.message = message

            update.message.reply_text(text=f"**{header}**\n\n{message.text}")
